pipeline {
    agent any
    tools {
        jdk 'jdk'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_CREDENTIALS = 'docker'
        SONARQUBE_SERVER = 'sonarqube' // Configure in Jenkins
    }
    
    parameters {
        choice(name: 'ENV', choices: ['dev', 'qa', 'prod'], description: 'Select deployment environment')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/mudit097/microservices-MicroService-Appliction.git'
            }
        }
        
        stage('Build and Deploy Services') {
            steps {
                script {
                    def services = [
                        "adservice", "cartservice", "checkoutservice", "currencyservice",
                        "emailservice", "frontend", "loadgenerator", "paymentservice",
                        "productcatalogservice", "recommendationservice", "shippingservice"
                    ]

                    for (service in services) {
                        stage("Processing ${service}") {
                            dir("microservices/src/${service}/") {
                                // SonarQube Analysis
                                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                                    sh """
                                    ${SCANNER_HOME}/bin/sonar-scanner \
                                        -Dsonar.projectKey=${service} \
                                        -Dsonar.sources=. \
                                        -Dsonar.host.url=http://your-sonarqube-url
                                    """
                                }

                                // Docker Build, Push, and Scan
                                withDockerRegistry(credentialsId: "${DOCKER_CREDENTIALS}", toolName: 'docker') {
                                    def imageTag = "8770406568/${service}:${params.ENV}"
                                    
                                    sh "docker build -t ${imageTag} ."
                                    sh "docker push ${imageTag}"

                                    // Trivy Security Scan
                                    sh "trivy image ${imageTag}"

                                    // Cleanup
                                    sh "docker rmi ${imageTag}"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
